services:
  airflow-pipeline:
    container_name: airflow-pipeline
    build: ./airflow-pipeline
    volumes:
      - ./airflow-pipeline/dags:/opt/airflow/dags
      - ./airflow-pipeline/plugins:/opt/airflow/plugins
      - ./airflow-pipeline/config:/opt/airflow/config
      - ./airflow-pipeline/logs:/opt/airflow/logs
    ports:
      - 8080:8080
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    restart: always
  
  mysql:
    container_name: mysql
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - 3307:${MYSQL_PORT}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
  
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    restart: always

  server:
    container_name: server
    build: ./server
    volumes:
      - ./server:/server
    ports:
      - 5000:5000
    environment:
      - FLASK_ENV=production
    env_file:
      - .env
    depends_on:
      airflow-pipeline:
        condition: service_started
      mysql:
        condition: service_healthy
    restart: always

  worker:
    container_name: worker
    build: ./server
    command: celery -A app.celery worker --loglevel=info -Q summarize_queue,send_news_queue,synthesize_news_queue
    volumes:
      - ./server:/server
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    depends_on:
      server:
        condition: service_started
      rabbitmq:
        condition: service_started
      mysql:
        condition: service_healthy
    extra_hosts: 
    - "host.docker.internal:host-gateway"
    restart: always

  server-slave:
    container_name: server-slave
    build: ./server-slave
    ports:
      - 7000:7000
    restart: always

  beat:
    container_name: beat
    build: ./server
    command: celery -A app.celery beat --loglevel=info
    volumes:
      - ./server:/server
    environment:
      - FLASK_ENV=production
    env_file:
      - .env
    depends_on:
      server:
        condition: service_started
      rabbitmq:
        condition: service_started
      mysql:
        condition: service_healthy
    restart: always

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - 27018:${MONGO_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    restart: always

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - 5000:5000
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - server
  #   restart: always

volumes:
  mysql_data:
  mongo_data: